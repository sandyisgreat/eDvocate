package com.advocate.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.advocate.database.ClientTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLIENT_TABLE.
*/
public class ClientTableDao extends AbstractDao<ClientTable, String> {

    public static final String TABLENAME = "CLIENT_TABLE";

    /**
     * Properties of entity ClientTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserIdClient = new Property(0, String.class, "userIdClient", true, "USER_ID_CLIENT");
        public final static Property ClientFirstName = new Property(1, String.class, "clientFirstName", false, "CLIENT_FIRST_NAME");
        public final static Property ClientLastName = new Property(2, String.class, "clientLastName", false, "CLIENT_LAST_NAME");
        public final static Property CaseNumber = new Property(3, String.class, "caseNumber", false, "CASE_NUMBER");
        public final static Property CourtNumber = new Property(4, String.class, "courtNumber", false, "COURT_NUMBER");
        public final static Property ClientMobile = new Property(5, String.class, "ClientMobile", false, "CLIENT_MOBILE");
        public final static Property BriefDetails = new Property(6, String.class, "briefDetails", false, "BRIEF_DETAILS");
        public final static Property LawyerId = new Property(7, String.class, "lawyerId", false, "LAWYER_ID");
        public final static Property NextDate = new Property(8, java.util.Date.class, "nextDate", false, "NEXT_DATE");
    };


    public ClientTableDao(DaoConfig config) {
        super(config);
    }
    
    public ClientTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENT_TABLE' (" + //
                "'USER_ID_CLIENT' TEXT PRIMARY KEY NOT NULL ," + // 0: userIdClient
                "'CLIENT_FIRST_NAME' TEXT," + // 1: clientFirstName
                "'CLIENT_LAST_NAME' TEXT," + // 2: clientLastName
                "'CASE_NUMBER' TEXT NOT NULL UNIQUE ," + // 3: caseNumber
                "'COURT_NUMBER' TEXT," + // 4: courtNumber
                "'CLIENT_MOBILE' TEXT," + // 5: ClientMobile
                "'BRIEF_DETAILS' TEXT," + // 6: briefDetails
                "'LAWYER_ID' TEXT," + // 7: lawyerId
                "'NEXT_DATE' INTEGER);"); // 8: nextDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENT_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientTable entity) {
        stmt.clearBindings();
 
        String userIdClient = entity.getUserIdClient();
        if (userIdClient != null) {
            stmt.bindString(1, userIdClient);
        }
 
        String clientFirstName = entity.getClientFirstName();
        if (clientFirstName != null) {
            stmt.bindString(2, clientFirstName);
        }
 
        String clientLastName = entity.getClientLastName();
        if (clientLastName != null) {
            stmt.bindString(3, clientLastName);
        }
        stmt.bindString(4, entity.getCaseNumber());
 
        String courtNumber = entity.getCourtNumber();
        if (courtNumber != null) {
            stmt.bindString(5, courtNumber);
        }
 
        String ClientMobile = entity.getClientMobile();
        if (ClientMobile != null) {
            stmt.bindString(6, ClientMobile);
        }
 
        String briefDetails = entity.getBriefDetails();
        if (briefDetails != null) {
            stmt.bindString(7, briefDetails);
        }
 
        String lawyerId = entity.getLawyerId();
        if (lawyerId != null) {
            stmt.bindString(8, lawyerId);
        }
 
        java.util.Date nextDate = entity.getNextDate();
        if (nextDate != null) {
            stmt.bindLong(9, nextDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientTable readEntity(Cursor cursor, int offset) {
        ClientTable entity = new ClientTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userIdClient
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clientFirstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clientLastName
            cursor.getString(offset + 3), // caseNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // courtNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ClientMobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // briefDetails
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lawyerId
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // nextDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientTable entity, int offset) {
        entity.setUserIdClient(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setClientFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCaseNumber(cursor.getString(offset + 3));
        entity.setCourtNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClientMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBriefDetails(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLawyerId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNextDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ClientTable entity, long rowId) {
        return entity.getUserIdClient();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ClientTable entity) {
        if(entity != null) {
            return entity.getUserIdClient();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
