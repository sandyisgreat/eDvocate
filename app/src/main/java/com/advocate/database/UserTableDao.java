package com.advocate.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.advocate.database.UserTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_TABLE.
*/
public class UserTableDao extends AbstractDao<UserTable, String> {

    public static final String TABLENAME = "USER_TABLE";

    /**
     * Properties of entity UserTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MobileNumber = new Property(0, String.class, "mobileNumber", false, "MOBILE_NUMBER");
        public final static Property UserIdLawyer = new Property(1, String.class, "userIdLawyer", true, "USER_ID_LAWYER");
        public final static Property EmailId = new Property(2, String.class, "emailId", false, "EMAIL_ID");
        public final static Property LawyerId = new Property(3, String.class, "lawyerId", false, "LAWYER_ID");
        public final static Property FirstName = new Property(4, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
        public final static Property FirmNames = new Property(7, String.class, "firmNames", false, "FIRM_NAMES");
    };


    public UserTableDao(DaoConfig config) {
        super(config);
    }
    
    public UserTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_TABLE' (" + //
                "'MOBILE_NUMBER' TEXT," + // 0: mobileNumber
                "'USER_ID_LAWYER' TEXT PRIMARY KEY NOT NULL ," + // 1: userIdLawyer
                "'EMAIL_ID' TEXT," + // 2: emailId
                "'LAWYER_ID' TEXT NOT NULL UNIQUE ," + // 3: lawyerId
                "'FIRST_NAME' TEXT," + // 4: firstName
                "'LAST_NAME' TEXT," + // 5: lastName
                "'CATEGORY' TEXT," + // 6: category
                "'FIRM_NAMES' TEXT);"); // 7: firmNames
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTable entity) {
        stmt.clearBindings();
 
        String mobileNumber = entity.getMobileNumber();
        if (mobileNumber != null) {
            stmt.bindString(1, mobileNumber);
        }
 
        String userIdLawyer = entity.getUserIdLawyer();
        if (userIdLawyer != null) {
            stmt.bindString(2, userIdLawyer);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(3, emailId);
        }
        stmt.bindString(4, entity.getLawyerId());
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
 
        String firmNames = entity.getFirmNames();
        if (firmNames != null) {
            stmt.bindString(8, firmNames);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public UserTable readEntity(Cursor cursor, int offset) {
        UserTable entity = new UserTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mobileNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userIdLawyer
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emailId
            cursor.getString(offset + 3), // lawyerId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // firmNames
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTable entity, int offset) {
        entity.setMobileNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserIdLawyer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmailId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLawyerId(cursor.getString(offset + 3));
        entity.setFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFirmNames(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserTable entity, long rowId) {
        return entity.getUserIdLawyer();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserTable entity) {
        if(entity != null) {
            return entity.getUserIdLawyer();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
