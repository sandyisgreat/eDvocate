package com.advocate.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.advocate.database.FirmTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FIRM_TABLE.
*/
public class FirmTableDao extends AbstractDao<FirmTable, String> {

    public static final String TABLENAME = "FIRM_TABLE";

    /**
     * Properties of entity FirmTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FirmName = new Property(0, String.class, "firmName", false, "FIRM_NAME");
        public final static Property UserIdFirm = new Property(1, String.class, "userIdFirm", true, "USER_ID_FIRM");
        public final static Property LawyerIds = new Property(2, String.class, "lawyerIds", false, "LAWYER_IDS");
    };


    public FirmTableDao(DaoConfig config) {
        super(config);
    }
    
    public FirmTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FIRM_TABLE' (" + //
                "'FIRM_NAME' TEXT NOT NULL UNIQUE ," + // 0: firmName
                "'USER_ID_FIRM' TEXT PRIMARY KEY NOT NULL ," + // 1: userIdFirm
                "'LAWYER_IDS' TEXT);"); // 2: lawyerIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FIRM_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FirmTable entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFirmName());
 
        String userIdFirm = entity.getUserIdFirm();
        if (userIdFirm != null) {
            stmt.bindString(2, userIdFirm);
        }
 
        String lawyerIds = entity.getLawyerIds();
        if (lawyerIds != null) {
            stmt.bindString(3, lawyerIds);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public FirmTable readEntity(Cursor cursor, int offset) {
        FirmTable entity = new FirmTable( //
            cursor.getString(offset + 0), // firmName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userIdFirm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // lawyerIds
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FirmTable entity, int offset) {
        entity.setFirmName(cursor.getString(offset + 0));
        entity.setUserIdFirm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLawyerIds(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FirmTable entity, long rowId) {
        return entity.getUserIdFirm();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FirmTable entity) {
        if(entity != null) {
            return entity.getUserIdFirm();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
